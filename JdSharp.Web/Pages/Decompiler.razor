@page "/Decompiler"
@using System.Text
@using JdSharp.Core.Utils
@using JdSharp.Core.Decompilers
@using JdSharp.Core.Models
@inject IJSRuntime _jsRuntime

<div class="container">
    <h3>JdSharp Decompiler</h3>
    <hr class="mt-2 mb-3"/>
    <div class="d-flex justify-content-between">
        <InputFile class="custom-file-input" OnChange="@OnFileLoad"></InputFile>
        <button type="button" class="btn btn-primary" onclick="@ClearContent">Clear</button>
    </div>
    <div class="mt-3">
        <h4>@FileName</h4>
        <textarea class="form-control" disabled rows="22">
            @InputValue
        </textarea>
    </div>
</div>


@code {
    private string? InputValue { get; set; }
    private string? FileName { get; set; }
    private readonly Encoding _encoding = Encoding.ASCII;
    private IEnumerable<IDecompiler> Decompilers { get; set; } = null!;

    protected override Task OnInitializedAsync()
    {
        Decompilers = _decompilerService.GetDecompilers();
        return Task.CompletedTask;
    }

    private async Task OnFileLoad(InputFileChangeEventArgs eventArgs)
    {
        await using MemoryStream memoryStream = new MemoryStream();
        await eventArgs.File.OpenReadStream().CopyToAsync(memoryStream);
        memoryStream.Position = 0x00;

        var (decompiler, fileSignature) = AssemblyUtils.GetDecompilerFromStream(memoryStream, Decompilers);

        if (decompiler is null)
        {
            await _jsRuntime.InvokeVoidAsync("alert", "JdSharp did not found a compatible decompiler for your file!");
            return;
        }
        
        await using MemoryStream memoryStreamCopy = new MemoryStream();
        await eventArgs.File.OpenReadStream().CopyToAsync(memoryStreamCopy);
        memoryStreamCopy.Position = 0x00;

        var decompilerResult = decompiler.Decompile(new DecompilerOptions
        {
            Console = Console.Out,
            FileSignature = fileSignature,
            InputFileStream = memoryStreamCopy,
            FileName = eventArgs.File.Name
        });

        if (decompilerResult.FileContents.Count is 1)
        {
            InputValue = _encoding.GetString(decompilerResult.FileContents.First().Data);
            FileName = decompilerResult.FileName;
        }
    }

    private void ClearContent()
    {
        InputValue = string.Empty;
        FileName = string.Empty;
    }

}